@page "/requests"
@inject ApiService apiService;
@inject ICalendar calendar;
@inject NavigationManager NavigationManager;

<PageTitle>Requests</PageTitle>

<h1>Requests:</h1>

<section>
    
    @* @for (int i = 0; i < requests.Count; i++)
    {
        Ids.Add(0);
        for (int j = 0; j < Ids.Count; j++)
        {
            if (requests[i].Id == Ids[j])
            {
                Ids[j] += 1;
            }
        }
    } *@

    @if (requests.Count != 0)
    {
        @foreach (var currentItem in requests)
        {
            <div style="display: block; width: 80%; max-width: 500px; border: 2px solid #333; padding: 10px; background-color: #f5f5f5; box-shadow: 0 4px 8px rgba(0,0,0,0.2); text-align: center;">
                <p>Date: @currentItem.Date</p>
                <p>Family: @currentItem.Name</p>
                <p>Exclusive: @(currentItem.Exclusive == true ? "Yes" : "No")</p>
                <button class="button" id="approve" @onclick="() => Approve(currentItem)">Approve</button>
                <button class="button" id="disapprove" @onclick="() => Disapprove(currentItem)">Disapprove</button>
            </div>
        }
    }
    else
    {
        <h2>There are currently no requests!</h2>
    }

    
</section>

@code {

    List<int> Ids = new List<int>();
    //List<Request> requests = new List<Request>();
    List<CalendarItem> requests = new List<CalendarItem>();
    CalendarItem request = new CalendarItem();
    bool showApproveModal = false;
    bool showDisapproveModal = false;

    //temporary
    //Request temp = new Request();



    protected override void OnInitialized()
    {
        
        var events = ApiService.GetAllCalendarEvents();

        foreach (var e in events)
        {
            // var item = calendar.Items.FirstOrDefault(n => n.Date == e.Date);
            // if (item == null)
            // {
            //     calendar.Items.Add(e);
            // }
            bool exists = calendar.Items.Any(n => n.Date == e.Date && n.Name == e.Name);
            if (!exists)
            {
                calendar.Items.Add(e);
            }
            // calendar.Items = calendar.Items
            //     .Where(item => item.Approved == null)
            //     .ToList();
            requests = calendar.Items
                .Where(item => item.Approved == null)
                .ToList();

        }

        // var apiItems = apiService.GetRequests();
        // foreach (var apiitem in apiItems)
        // {
        //     var item = calendar.Items.FirstOrDefault(n => n.Date == apiitem.Date);
        //     if (item == null)
        //     {
        //         calendar.Items.Add(apiitem);
        //     }
        // }

        // calendar.Items = calendar.Items
        //     .Where(item => item.Approved == null)
        //     .ToList();
    }

    void Approve(CalendarItem item)
    {
        item.Approved = true;
        ApiService.UpdateCalendarEvent(item);
        
        requests = calendar.Items
                .Where(item => item.Approved == null)
                .ToList();
        // ApiService.AddCalendarEvent(
        //     name: item.Name,
        //     exclusive: item.Exclusive,
        //     approved: item.Approved,
        //     date: item.Date
        // );
        //ApiService.DeleteCalendarEvent(item.Id);
        //OnInitialized();
    }
    void Disapprove(CalendarItem item)
    {
        item.Approved = false;
        ApiService.UpdateCalendarEvent(item);

        requests = calendar.Items
                .Where(item => item.Approved == null)
                .ToList();
        //ApiService.DeleteCalendarEvent(item.Id);
        //OnInitialized();
        // NavigationManager.NavigateTo("/Requests");
        // NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
    void OpenApproveModal(CalendarItem item)
    {
        request = item;
        showApproveModal = true;
    }

    void OpenDisapproveModal(CalendarItem item)
    {
        request = item;
        showDisapproveModal = true;
    }

    void CloseModals()
    {
        showApproveModal = false;
        showDisapproveModal = false;
    }
}

@if (showApproveModal)
{
    <div class="modal">
        <div class="modal-content">
            <h3>Are you sure you want to APPROVE?</h3>
            <div>
                <button class="button" @onclick="() => { Approve(request); CloseModals(); }">Approve</button>
                <button class="button" @onclick="CloseModals">Cancel</button>
            </div>
        </div>
    </div>
}

@if (showDisapproveModal)
{
    <div class="modal">
        <div class="modal-content">
            <h3>Are you sure you want to DISAPPROVE?</h3>
            <div>
                <button class="button" @onclick="() => { Disapprove(request); CloseModals(); }">Disapprove</button>
                <button class="button" @onclick="CloseModals">Cancel</button>
            </div>
        </div>
    </div>
}
