@page "/requests"
@inject ApiService apiService;
@inject ICalendar calendar;
@inject NavigationManager NavigationManager;

<PageTitle>Requests</PageTitle>

<h1>Requests:</h1>

<section>
    
    @* @for (int i = 0; i < requests.Count; i++)
    {
        Ids.Add(0);
        for (int j = 0; j < Ids.Count; j++)
        {
            if (requests[i].Id == Ids[j])
            {
                Ids[j] += 1;
            }
        }
    } *@

    @if (calendar.Items.Count != 0)
    {
        @for (int i = 0; i < calendar.Items.Count; i++)
        {
            var currentItem = calendar.Items[i];
            <div style="
                display: block;
                width: 80%; /* width of the container box */
                max-width: 500px; /* optional max width */
                /*margin: 50px auto;  center horizontally on the page */
                border: 2px solid #333; /* box border */
                padding: 10px; /* space inside the box */
                background-color: #f5f5f5; /* optional background */
                box-shadow: 0 4px 8px rgba(0,0,0,0.2); /* optional shadow */
                justify-items: center; /* center cells horizontally */
                align-items: center; /* center cells vertically */
                text-align: center; /* center text inside cells */
            ">
                <p>Date: @calendar.Items[i].Date</p>
                
                <p>Family: @calendar.Items[i].Name</p>
                <p>
                    @if (@calendar.Items[i].Exclusive == true)
                    {
                    <p>Exclusive: Yes</p>
                } else if (@calendar.Items[i].Exclusive == false)
                {
                    <p>Exclusive: No</p>
                }
                </p>
                <button class="button" id="approve" @onclick="() => Approve(currentItem)">Approve</button>
                <button class="button" id="disapprove" @onclick="() => Disapprove(currentItem)">Disapprove</button>
            </div>
        }
    } else
    {
        <h2>There are currently no requests!</h2>
    }

    
</section>

@code {

    List<int> Ids = new List<int>();
    //List<Request> requests = new List<Request>();
    List<CalendarItem> requests = new List<CalendarItem>();
    CalendarItem request = new CalendarItem();
    bool showApproveModal = false;
    bool showDisapproveModal = false;
    //temporary
    //Request temp = new Request();



    protected override void OnInitialized()
    {
        
        var events = ApiService.GetAllCalendarEvents();

        foreach (var e in events)
        {
            //Console.WriteLine($"Name: {e.Name}, Exclusive: {e.Exclusive}, Approved: {e.Approved}, Date: {e.Date}");
            var item = calendar.Items.FirstOrDefault(n => n.Date == e.Date);
            if (item == null)
            {
                calendar.Items.Add(e);
            }
            calendar.Items = calendar.Items
                .Where(item => item.Approved == null)
                .ToList();

        }

        // var apiItems = apiService.GetRequests();
        // foreach (var apiitem in apiItems)
        // {
        //     var item = calendar.Items.FirstOrDefault(n => n.Date == apiitem.Date);
        //     if (item == null)
        //     {
        //         calendar.Items.Add(apiitem);
        //     }
        // }

        // calendar.Items = calendar.Items
        //     .Where(item => item.Approved == null)
        //     .ToList();
    }

    void Approve(CalendarItem item)
    {
        item.Approved = true;
        ApiService.UpdateCalendarEvent(item);
        
        // ApiService.AddCalendarEvent(
        //     name: item.Name,
        //     exclusive: item.Exclusive,
        //     approved: item.Approved,
        //     date: item.Date
        // );
        //ApiService.DeleteCalendarEvent(item.Id);
        OnInitialized();
    }
    void Disapprove(CalendarItem item)
    {
        // item.Approved = false;
        // ApiService.UpdateCalendarEvent(item);

        ApiService.DeleteCalendarEvent(item.Id);
        OnInitialized();
        NavigationManager.NavigateTo("/Requests");
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
    void OpenApproveModal(CalendarItem item)
    {
        request = item;
        showApproveModal = true;
    }

    void OpenDisapproveModal(CalendarItem item)
    {
        request = item;
        showDisapproveModal = true;
    }

    void CloseModals()
    {
        showApproveModal = false;
        showDisapproveModal = false;
    }
}

@if (showApproveModal)
{
    <div class="modal">
        <div class="modal-content">
            <h3>Are you sure you want to APPROVE?</h3>
            <div>
                <button class="button" @onclick="() => { Approve(request); CloseModals(); }">Approve</button>
                <button class="button" @onclick="CloseModals">Cancel</button>
            </div>
        </div>
    </div>
}

@if (showDisapproveModal)
{
    <div class="modal">
        <div class="modal-content">
            <h3>Are you sure you want to DISAPPROVE?</h3>
            <div>
                <button class="button" @onclick="() => { Disapprove(request); CloseModals(); }">Disapprove</button>
                <button class="button" @onclick="CloseModals">Cancel</button>
            </div>
        </div>
    </div>
}
