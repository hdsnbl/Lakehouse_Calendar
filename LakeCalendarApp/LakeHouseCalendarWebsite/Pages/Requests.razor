@page "/requests"
@inject ApiService apiService;
@inject ICalendar calendar;
@inject NavigationManager NavigationManager;

<PageTitle>Requests</PageTitle>

<h1 style="text-align: center; font-weight: bold; text-decoration: underline;">Requests</h1>
<MudStack>
    <MudToggleGroup T="bool?" SelectionMode="SelectionMode.SingleSelection" Value="@displaying" ValueChanged="ChangeDisplay"
                    Color="Color.Primary" CheckMark="true" FixedContent="true" Dense="true" Rounded="true" Class="d-flex justify-center">
        <MudToggleItem T="bool?" Value="@(null)" Text="Pending" />
        <MudToggleItem T="bool?" Value="@(true)" Text="Approved" />
        <MudToggleItem T="bool?" Value="@(false)" Text="Disapproved" />
    </MudToggleGroup>
</MudStack>

<section>
    @if (realRequests.Count != 0)
    {
        @foreach (var currentItem in realRequests)
        {
            <div style="
                    width: 80%;
                    max-width: 600px;
                    margin: 20px auto;
                    border: 2px solid #333;
                    border-radius: 12px;
                    background-color: #fafafa;
                    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
                    padding: 15px;
                ">
                <h2 style="
                        margin-bottom: 15px;
                        background-color: #333;
                        color: white;
                        padding: 10px;
                        border-radius: 8px;
                    ">
                    Family: @currentItem.Name <br>
                    @(currentItem.Approved == true ? "Approved" : currentItem.Approved == false ? "Disapproved" : "Pending")
                </h2>
                <MudPaper>
                    <MudList T="string">
                        @foreach (var item in currentItem.FullRequest)
                        {
                            <MudListItem>
                                <div style="
                                                border: 1px solid #bbb;
                                                border-radius: 8px;
                                                padding: 10px;
                                                background-color: #fff;
                                                text-align: center;
                                                /* Make an onclick() function to add a modal that displays the information of the date when clicked */
                                            ">
                                    <p><strong>Date:</strong> @item.Date.ToString("MMM dd, yyyy"), <strong>Exclusive:</strong> @(item.Exclusive == true ? "Yes" : "No")</p>
                                </div>
                            </MudListItem>
                        }
                    </MudList>
                </MudPaper>
                <div style="
                        display: flex;
                        justify-content: center;
                        gap: 15px;
                        margin-top: 20px;
                    ">
                    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" @onclick="() => ShowModal(currentItem, true)">Approve All</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="() => ShowModal(currentItem, false)">Disapprove All</MudButton>
                </div>
                <MudMessageBox @ref="_mudMessageBox" Title="Are you sure?" CancelText="Cancel">
                    <MessageContent>
                        Are you sure?
                    </MessageContent>
                    <YesButton>
                        @if (approve)
                        {
                            <MudButton @onclick="() => Approve(selectedRequest)" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Add">Approve</MudButton>
                        }
                        else
                        {
                            <MudButton @onclick="() => Disapprove(selectedRequest)" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete">Disapprove</MudButton>
                        }
                    </YesButton>
                </MudMessageBox>
            </div>
        }
    }
    else
    {
        <h2>There are currently no requests!</h2>
    }
</section>


@code {
    List<int> Ids = new List<int>();
    List<CalendarItem> requests = new List<CalendarItem>();
    List<Request> realRequests = new List<Request>();
    CalendarItem request = new CalendarItem();
    bool showApproveModal = false;
    bool showDisapproveModal = false;
    bool? displaying = null;
    bool approve;
    Request? selectedRequest;
    private MudMessageBox _mudMessageBox;

    protected override void OnInitialized()
    {
        realRequests = ApiService.GetAllRequests()
            .Where(item => item.Approved == displaying)
            .ToList();
    }

    void ShowModal(Request request, bool isApprove)
    {
        selectedRequest = request;
        approve = isApprove;
        OnButtonClickedAsync();
    }

    private async Task OnButtonClickedAsync()
    {
        bool? result = await _mudMessageBox.ShowAsync();
        StateHasChanged();
    }

    void ChangeDisplay(bool? value)
    {
        displaying = value;

        realRequests = ApiService.GetAllRequests() 
            .Where(item => item.Approved == displaying)
            .ToList();

        StateHasChanged();
    }

    void Approve(Request request)
    {
        if (request.FullRequest == null || request.FullRequest.Count == 0)
            return;

        foreach (var item in request.FullRequest)
        {
            item.Approved = true;
            ApiService.UpdateCalendarEvent(item);
        }
        request.Approved = true;
        ApiService.UpdateRequest(request);

        realRequests = ApiService.GetAllRequests()
            .Where(item => item.Approved == displaying)
            .ToList();

        StateHasChanged();
    }
    void Disapprove(Request request)
    {
        if (request.FullRequest == null || request.FullRequest.Count == 0)
            return;

        foreach (var item in request.FullRequest)
        {
            item.Approved = false;
            ApiService.UpdateCalendarEvent(item);
        }
        request.Approved = false;
        ApiService.UpdateRequest(request);

        realRequests = ApiService.GetAllRequests()
            .Where(item => item.Approved == displaying)
            .ToList();

        StateHasChanged();
    }
}
