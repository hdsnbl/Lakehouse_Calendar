@page "/requests"
@inject ApiService apiService;
@inject ICalendar calendar;
@inject NavigationManager NavigationManager;

<PageTitle>Requests</PageTitle>

<h1 style="text-align: center; font-weight: bold; text-decoration: underline;">Requests</h1>
<MudButtonGroup Color="Color.Dark" Variant="Variant.Filled" Style="display:flex; justify-content: center; background-color: gray">
    <MudButton @onclick="() => ChangeDisplay(null)">Pending</MudButton>
    <MudButton @onclick="() => ChangeDisplay(true)">Approved</MudButton>
    <MudButton @onclick="() => ChangeDisplay(false)">Disapproved</MudButton>
</MudButtonGroup>

<section>
    @if (realRequests.Count != 0)
    {
        @foreach (var currentItem in realRequests)
        {
            
            <div style="
                    width: 80%;
                    max-width: 600px;
                    margin: 20px auto;
                    border: 2px solid #333;
                    border-radius: 12px;
                    background-color: #fafafa;
                    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
                    padding: 15px;
                ">
                <h2 style="
                        margin-bottom: 15px;
                        background-color: #333;
                        color: white;
                        padding: 10px;
                        border-radius: 8px;
                    ">
                    Family: @currentItem.Name <br>
                    Approved: @(currentItem.Approved == true ? "Approved" : currentItem.Approved == false ? "Disapproved" : "Pending")
                </h2>
                <MudPaper>
                    <MudList T="string">
                        @foreach (var item in currentItem.FullRequest)
                        {
                            <MudListItem>
                                <div style="
                                                border: 1px solid #bbb;
                                                border-radius: 8px;
                                                padding: 10px;
                                                background-color: #fff;
                                                text-align: center;
                                                /* Make an onclick() function to add a modal that displays the information of the date when clicked */
                                            ">
                                    <p><strong>Date:</strong> @item.Date.ToString("MMM dd, yyyy"), <strong>Exclusive:</strong> @(item.Exclusive == true ? "Yes" : "No")</p>
                                </div>
                            </MudListItem>
                        }
                    </MudList>
                </MudPaper>

                <div style="
                        display: flex;
                        justify-content: center;
                        gap: 15px;
                        margin-top: 20px;
                    ">
                    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" @onclick="() => Approve(currentItem)">Approve All</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="() => Disapprove(currentItem)">Disapprove All</MudButton>
                </div>
            </div>
        }
    }
    else
    {
        <h2>There are currently no requests!</h2>
    }
</section>


@code {
    List<int> Ids = new List<int>();
    List<CalendarItem> requests = new List<CalendarItem>();
    List<Request> realRequests = new List<Request>();
    CalendarItem request = new CalendarItem();
    bool showApproveModal = false;
    bool showDisapproveModal = false;
    //bool? displaying = null;

    protected override void OnInitialized()
    {
        var events = ApiService.GetAllRequests();
        realRequests = events;
        // realRequests = events                                //Only shows the requests that haven't been approved or disapproved
        //     .Where(item => item.Approved == null)
        //     .ToList();
    }

    void ChangeDisplay(bool? display)
    {
        realRequests = ApiService.GetAllRequests()                                //Only shows the requests that haven't been approved or disapproved
            .Where(item => item.Approved == display)
            .ToList();
    }

    void Approve(Request request)
    {
        if (request.FullRequest == null || request.FullRequest.Count == 0)
            return;

        foreach (var item in request.FullRequest)
        {
            item.Approved = true;
            ApiService.UpdateCalendarEvent(item);
        }
        request.Approved = true;
        ApiService.UpdateRequest(request);

        // realRequests = ApiService.GetAllRequests()                                //Only shows the requests that haven't been approved or disapproved
        //         .Where(item => item.Approved == null)
        //         .ToList();
    }
    void Disapprove(Request request)
    {
        if (request.FullRequest == null || request.FullRequest.Count == 0)
            return;

        foreach (var item in request.FullRequest)
        {
            item.Approved = false;
            ApiService.UpdateCalendarEvent(item);
        }
        request.Approved = false;
        ApiService.UpdateRequest(request);

        // realRequests = ApiService.GetAllRequests()                                //Only shows the requests that haven't been approved or disapproved
        //         .Where(item => item.Approved == null)
        //         .ToList();
    }

    void OpenApproveModal(CalendarItem item)
    {
        request = item;
        showApproveModal = true;
    }

    void OpenDisapproveModal(CalendarItem item)
    {
        request = item;
        showDisapproveModal = true;
    }

    void CloseModals()
    {
        showApproveModal = false;
        showDisapproveModal = false;
    }
}

@* @if (showApproveModal)
{
    <div class="modal">
        <div class="modal-content">
            <h3>Are you sure you want to APPROVE?</h3>
            <div>
                <button class="button" @onclick="() => { Approve(request); CloseModals(); }">Approve</button>
                <button class="button" @onclick="CloseModals">Cancel</button>
            </div>
        </div>
    </div>
}

@if (showDisapproveModal)
{
    <div class="modal">
        <div class="modal-content">
            <h3>Are you sure you want to DISAPPROVE?</h3>
            <div>
                <button class="button" @onclick="() => { Disapprove(request); CloseModals(); }">Disapprove</button>
                <button class="button" @onclick="CloseModals">Cancel</button>
            </div>
        </div>
    </div>
} *@
