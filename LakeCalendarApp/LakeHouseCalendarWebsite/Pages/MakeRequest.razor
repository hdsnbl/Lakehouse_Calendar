@page "/makeRequest"
@inject ICalendar calendar;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@using MudBlazor;


<PageTitle>MakeRequest</PageTitle>

<MudPaper Width="50%" Class="p-4">
    <h1>Make a Request:</h1>
    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
        <MudTextField @bind-Value="family"
                      T="string"
                      Label="Family Name"
                      MaxLength="25"
                      Counter="25"
                      Immediate="true"
                      Required="true"
                      RequiredError="Family name is required!"
                      Class="mb-4" />
        
        <MudDateRangePicker @bind-DateRange="_dateRange"
                            Label="Select Date Range"
                            Required="true"
                            RequiredError="Date range is required!"
                            Margin="Margin.Dense"
                            PickerVariant="PickerVariant.Dialog"
                            Class="mb-4" />

        <MudCheckBox @bind-Checked="exclusive"
                        T="bool"
                        Label="Exclusive"
                        Class="mb-4" />

        <MudTextField @bind-Value="notes"
                      T="string"
                      Label="Notes"
                      MaxLength="300"
                      Counter="300"
                      Immediate="true"
                      Required="false"
                      Class="mb-4" />

        <MudButton Variant="Variant.Filled"
                    Color="Color.Primary"
                    OnClick="makeRequest"
                    Disabled="@(!success)">
            Register
        </MudButton>
    </MudForm>
</MudPaper>

<MudMessageBox @ref="_mudMessageBox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        @errorText
    </MessageContent>
</MudMessageBox>

@code {
    DateTime start = DateTime.Now;
    DateTime end = DateTime.Now;
    string family = "";
    string notes = "";
    bool exclusive;
    bool? approved;
    bool duplicate;
    bool claimed;
    private string errorText = "";
    Request request;
    private MudBlazor.DateRange _dateRange = new(DateTime.Today, DateTime.Today);

    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    protected override void OnInitialized()
    {
        calendar.Items = ApiService.GetAllCalendarEvents();
    }

    private MudMessageBox _mudMessageBox;
    private string _state = "Message box hasn't been opened yet";

    private async Task OnButtonClickedAsync()
    {
        bool? result = await _mudMessageBox.ShowAsync();
        _state = result is null ? "Canceled" : "Deleted!";
        StateHasChanged();
    }

    private void CloseErrorModal()
    {
        errorText = "";
        StateHasChanged(); // refresh UI
    }

    private void makeRequest()
    {
        if (_dateRange.Start == null || _dateRange.End == null)
            return;

        start = _dateRange.Start.Value;
        end = _dateRange.End.Value;

        if (!ValidateRequest())
        {
            return;
        }
        for (DateTime date = start.Date; date <= end.Date; date = date.AddDays(1))
        {
            bool exists = calendar.Items.Any(n => n.Date == date && n.Name == family && n.Approved == true);        //Checks if there is already an item with the same date and name that is approved (don't want duplicates)
            bool taken = calendar.Items.Any(n => n.Date == date && n.Exclusive == true && n.Approved == true);      //Checks if there is already an item with the same date that is approved an exclusive (Can't request that day if its been claimed as an exclusive day)
            if (exists)
            {
                duplicate = true;
                ValidateRequest();
                return;
            }else if (taken)
            {
                claimed = true;
                ValidateRequest();
                return;
            }
        }

        for (DateTime date = start.Date; date <= end.Date; date = date.AddDays(1))
        {   

            if (start.Date == date)
            {
                request = ApiService.AddAndGetRequest(name: family);         //Creates a request item in requests database, but only once so there are no unnecessary request items
            }
            var calendarItem = new CalendarItem();

            calendarItem.Date = date;
            calendarItem.Name = family;
            calendarItem.Exclusive = exclusive;
            calendarItem.Approved = null;
            calendarItem.Request_id = request.Id;
            calendarItem.Notes = notes;

            calendar.Items.Add(calendarItem);

            calendarItem = ApiService.AddAndGetCalendarEvent(
                name: family,
                exclusive: exclusive,
                approved: approved,
                date: date,
                request_id: request.Id,
                notes: notes
            );
            request.FullRequest.Add(calendarItem);


        }

        NavigationManager.NavigateTo("/Requests");

    }

    private bool ValidateRequest()
    {
        bool valid = true;
        errorText = "";
        if (duplicate == true)
        {
            errorText += "This request has already been approved\n\r";
            OnButtonClickedAsync();
            valid = false;
            duplicate = false;
        }
        if (claimed == true)
        {
            errorText += "One of these days has already been exclusively claimed\n\r";
            OnButtonClickedAsync();
            valid = false;
            claimed = false;
        }
        if (!valid)
        {
            StateHasChanged(); // forces modal to appear again even if it was hidden manually
        }

        return valid;
    }
}

