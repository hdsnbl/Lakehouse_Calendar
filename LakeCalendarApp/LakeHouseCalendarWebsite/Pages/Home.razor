@page "/"
@* @inject Request request; *@
@* @inject CalendarItem items; *@
@inject ICalendar calendar;
@inject ApiService apiService;
@inject NavigationManager NavigationManager;

<PageTitle>Calendar</PageTitle>

<h1>Allen Lakehouse Calendar</h1>

<MudMessageBox @ref="_mudMessageBox" Title="@GetModalTitle()" CancelText="Close">
    <MessageContent>
        @if (selectedItems?.Any() == true)
        {
            <MudPaper>
                <MudList T="CalendarItem">
                    @foreach (var item in selectedItems)
                    {
                        <MudListItem style="
                                border: 1px solid #bbb;
                                border-radius: 8px;
                                padding: 10px;
                                background-color: #fff;
                                text-align: center;
                            ">
                            <p><strong>@item.Name</strong></p>
                            @if (item.Notes != null)
                            {
                                <p><strong>Notes:</strong> @item.Notes</p>
                            }
                            else
                            {
                                <p>There are no notes here.</p>
                            }
                        </MudListItem>
                    }
                </MudList>
            </MudPaper>
        }
        else
        {
            <p>No events for this day.</p>
        }
    </MessageContent>
</MudMessageBox>

<div style="display: flex; align-items: center; justify-content: space-between;">
    <MudButton Variant="Variant.Filled" Size="Size.Medium" Color="Color.Dark" style="width: 14.5%" @onclick="() => { monthsAway--; CreateMonth(); }">Previous Month</MudButton>               @* need to change *@
    <h2>@monthName, @year</h2>
    <MudButton Variant="Variant.Filled" Size="Size.Medium" Color="Color.Dark" style="width: 14.5%" @onclick="() => { monthsAway++; CreateMonth(); }">Next Month</MudButton>
</div>

<section style="
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 0;
    width: 100%;
">
    @for (int i = 0; i < numDummyColumn; i++)
    {
        <div></div>
    }

    @for (int i = 1; i <= monthEnd.Day; i++)
    {
        var dayDate = new DateTime(year, month, i);
        var dayItems = calendar.Items.Where(n => n.Date.Date == dayDate.Date).ToList();

        var backgroundColor = dayItems.Any()
        ? (dayItems.Any(n => n.Exclusive == true) ? "indianred" : "lightgreen")
        : "lightyellow";

        <div style="background-color: @backgroundColor;"
             @onclick="() => OpenDayItems(dayDate)">
            <h2>@i</h2>
            @if (dayItems.Any())
            {
                <p>@string.Join(", ", dayItems.Select(n => n.Name))</p>
            }
        </div>
    }
</section>

@code{
    string monthName = "";
    DateTime monthEnd;
    int numDummyColumn = 0;
    int monthsAway = 0;
    int year = 2025;
    int month = 0;
    private MudMessageBox _mudMessageBox;
    private List<CalendarItem> selectedItems = new();
    private DateTime? selectedDate;

    List<CalendarItem> monthlyItems = new List<CalendarItem>();
    List<Calendar> daysOfMonth = new List<Calendar>();

    protected override void OnInitialized()
    {
        calendar.Items = ApiService.GetAllCalendarEvents();
        CreateMonth();
    }

    private string GetModalTitle()
    {
        return selectedDate.HasValue ? selectedDate.Value.ToString("MMMM dd, yyyy") : "No date selected";
    }

    private async Task OpenDayItems(DateTime date)
    {
        selectedDate = date;
        selectedItems = calendar.Items
            .Where(n => n.Date.Date == date.Date)
            .ToList();

        StateHasChanged();
        await Task.Yield();

        await _mudMessageBox.ShowAsync();
    }

    void CreateMonth()
    {
        monthlyItems.Clear();
        daysOfMonth.Clear();

        var tempDate = DateTime.Now.AddMonths(monthsAway);
        month = tempDate.Month;
        year = tempDate.Year;

        DateTime monthStart = new DateTime(year, month, 1);
        monthEnd = monthStart.AddMonths(1).AddDays(-1);
        monthName = monthStart.Month switch
        {
            1 => "January",
            2 => "February",
            3 => "March",
            4 => "April",
            5 => "May",
            6 => "June",
            7 => "July",
            8 => "August",
            9 => "September",
            10 => "October",
            11 => "November",
            12 => "December",
            _ => ""
        };

        var apiItems = ApiService.GetCalendarEvents(monthStart, monthEnd);

        foreach (var apiitem in apiItems)
        {
            // var item = calendar.Items.FirstOrDefault(n => n.Date == apiitem.Date);          
            // if (item == null)
            // {
            //     calendar.Items.Add(apiitem);
            // }
            bool exists = calendar.Items.Any(n => n.Date == apiitem.Date && n.Name == apiitem.Name);
            if (!exists)
            {
                calendar.Items.Add(apiitem);
            }
        }
        calendar.Items = calendar.Items
            .Where(item => item.Approved == true)
            .ToList();

        numDummyColumn = (int)monthStart.DayOfWeek;
    }
}
