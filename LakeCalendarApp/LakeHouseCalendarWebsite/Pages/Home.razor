@page "/"
@* @inject Request request; *@
@* @inject CalendarItem items; *@
@inject ICalendar calendar;
@inject ApiService apiService;
@inject NavigationManager NavigationManager;

<PageTitle>Calendar</PageTitle>

<h1>Allen Lakehouse Calendar</h1>

@code{
    // private ApiService apiService = new ApiService();
    string monthName = "";
    DateTime monthEnd;
    int numDummyColumn = 0;
    int monthsAway = 0;
    int year = 2025;
    int month = 0;
    string names = "";

    List<CalendarItem> monthlyItems = new List<CalendarItem>();
    List<Calendar> daysOfMonth = new List<Calendar>();

    protected override void OnInitialized()
    {
        calendar.Items = ApiService.GetAllCalendarEvents();
        CreateMonth();
    }

    void CreateMonth()
    {
        monthlyItems.Clear();
        daysOfMonth.Clear();

        var tempDate = DateTime.Now.AddMonths(monthsAway);
        month = tempDate.Month;
        year = tempDate.Year;

        DateTime monthStart = new DateTime(year, month, 1);
        monthEnd = monthStart.AddMonths(1).AddDays(-1);
        monthName = monthStart.Month switch
        {
            1 => "January",
            2 => "February",
            3 => "March",
            4 => "April",
            5 => "May",
            6 => "June",
            7 => "July",
            8 => "August",
            9 => "September",
            10 => "October",
            11 => "November",
            12 => "December",
            _ => ""
        };

        var apiItems = ApiService.GetCalendarEvents(monthStart, monthEnd);

        foreach (var apiitem in apiItems)
        {
            // var item = calendar.Items.FirstOrDefault(n => n.Date == apiitem.Date);          
            // if (item == null)
            // {
            //     calendar.Items.Add(apiitem);
            // }
            bool exists = calendar.Items.Any(n => n.Date == apiitem.Date && n.Name == apiitem.Name);
            if (!exists)
            {
                calendar.Items.Add(apiitem);
            }
        }
        calendar.Items = calendar.Items
            .Where(item => item.Approved == true)
            .ToList();

        numDummyColumn = (int)monthStart.DayOfWeek;
    }
}

<div style="display: flex; align-items: center; justify-content: space-between;">
    <MudButton Variant="Variant.Filled" Size="Size.Medium" Color="Color.Dark" style="width: 14.5%" @onclick="() => { monthsAway--; CreateMonth(); }">Previous Month</MudButton>               @* need to change *@
    <h2>@monthName, @year</h2>
    <MudButton Variant="Variant.Filled" Size="Size.Medium" Color="Color.Dark" style="width: 14.5%" @onclick="() => { monthsAway++; CreateMonth(); }">Next Month</MudButton>
</div>

<section style="
    display: grid;
    grid-template-columns: repeat(7, 1fr); /* 7 columns for a week */
    gap: 0; /* removes space between cells */
    width: 100%;
">
    @for (int i = 0; i < numDummyColumn; i++)
    {
        <div></div>
    }
    @for (int i = 1; i <= monthEnd.Day; i++)
    {
        var day = new Calendar();
        CalendarItem? calendarItem = null;
        List<CalendarItem>? calendarItemsOnDate = null;
        @if (calendar.Items.Count != 0)
        {
            // Get all items that have the same date (same year/month/day)
            calendarItemsOnDate = calendar.Items
            .Where(n => n.Date.Date == new DateTime(year, month, i).Date)
            .ToList();

            if (calendarItemsOnDate.Any())
            {
                // Add all events to the day
                foreach (var item in calendarItemsOnDate)
                {
                    //day.calendarItems.Add(item);
                    day.Items.Add(item);
                    monthlyItems.Add(item);
                }

                // Combine names like "Bob and George"
                var combinedNames = string.Join(" and ", calendarItemsOnDate.Select(n => n.Name));

                // Create a new CalendarItem representing the combined entry (for display)
                calendarItem = new CalendarItem
                {
                    Name = combinedNames,
                    Exclusive = calendarItemsOnDate.Any(n => n.Exclusive == true),
                    Approved = calendarItemsOnDate.All(n => n.Approved == true),
                    Date = new DateTime(year, month, i)
                };
            }
            else
            {
                calendarItem = new CalendarItem();
            }
        }
        @if (day.Items.Count == 0)
        {
            <div style="background-color: lightyellow;">
                <h2>@i</h2>
            </div>
        }
        else
        {
            daysOfMonth.Add(day);
            <div style="@(calendarItem!.Exclusive == null ? "background-color: lightyellow;" : (calendarItem.Exclusive == true ? "background-color: indianred;" : "background-color: lightgreen;"))">
                <h2>@i</h2>
                @if (calendarItem != null)
                {
                    <p>@calendarItem.Name</p>
                }
            </div>
        }
        
    }

</section>

